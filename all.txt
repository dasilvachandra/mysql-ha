
====================== ./LICENSE ======================
MIT License


====================== ./README.md ======================
üì¶ mysql-ha

Cluster MySQL High Availability lintas Data Center menggunakan WireGuard VPN, HAProxy, dan Keepalived.
Proyek ini menyediakan struktur direktori, konfigurasi, dan contoh deployment untuk membangun replikasi MySQL dengan failover otomatis menggunakan VIP yang berpindah antar-DC.

‚ú® Fitur

üîí WireGuard VPN sebagai tunnel antar-DC.

üóÑÔ∏è MySQL Group Replication (single-primary) untuk sinkronisasi data.

‚öñÔ∏è HAProxy sebagai load balancer MySQL.

üõ°Ô∏è Keepalived untuk virtual IP (VIP) failover antar node/DC.

üìÇ Struktur direktori modular (dc1/, dc2/, mysql/, docs/) agar mudah dikelola dan dikembangkan.

üìÇ Struktur Direktori
mysql-ha/
‚îú‚îÄ‚îÄ dc1/                  # Konfigurasi & compose untuk Data Center 1
‚îú‚îÄ‚îÄ dc2/                  # Konfigurasi & compose untuk Data Center 2
‚îú‚îÄ‚îÄ mysql/                # Konfigurasi MySQL (Group Replication)
‚îú‚îÄ‚îÄ docs/                 # Dokumentasi & catatan implementasi

üöÄ Tujuan

Memberikan kerangka kerja (scaffold) untuk eksperimen dan implementasi MySQL HA lintas DC.

Memisahkan konfigurasi per DC agar mudah dimodifikasi sesuai kebutuhan.

Mendukung deployment berbasis Docker Compose maupun integrasi ke sistem produksi.

====================== ./all.txt ======================


====================== ./dc1/docker-compose.dc1.yml ======================
version: "3.8"

networks:
  intra-ha:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.1.0/24   # subnet khusus DC1

services:
  mysql:
    image: mysql:8.0
    container_name: mysql-dc1
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: rootpass
    volumes:
      - ../mysql/data:/var/lib/mysql
      - ../mysql/my.cnf.dc1:/etc/mysql/conf.d/my.cnf
    networks:
      intra-ha:
        ipv4_address: 172.20.1.10

  haproxy-keepalived:
    image: haproxy:2.8
    container_name: haproxy-keepalived-dc1
    network_mode: "host"
    cap_add:
      - NET_ADMIN
      - NET_BROADCAST
      - NET_RAW
    environment:
      KEEPALIVED_PRIORITY: 150
    volumes:
      - ./haproxy-keepalived/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
      - ./haproxy-keepalived/keepalived.conf:/etc/keepalived/keepalived.conf
    depends_on:
      - mysql


====================== ./dc1/haproxy-keepalived/haproxy.cfg ======================
global
  maxconn 2048

defaults
  log global
  mode tcp
  timeout connect 3s
  timeout client  30s
  timeout server  30s

listen mysql_vip
  bind 10.7.0.10:3306
  option tcplog
  balance first
  server db_local 127.0.0.1:3306 check inter 2s fall 2 rise 2


====================== ./dc1/haproxy-keepalived/keepalived.conf ======================
vrrp_instance VI_10 {
  state BACKUP
  interface wg0
  virtual_router_id 10
  priority 150
  advert_int 1
  authentication {
    auth_type PASS
    auth_pass SomeSecret
  }
  virtual_ipaddress {
    10.7.0.10/24 dev wg0
  }
  track_script {
    chk_mysql
  }
}

vrrp_script chk_mysql {
  script "/usr/local/bin/check-mysql.sh"
  interval 2
  fall 2
  rise 2
}


====================== ./dc1/scripts/auto-route.sh ======================
#!/usr/bin/env bash
set -euo pipefail

# Optional: hanya jika tidak pakai PostUp di wg0.conf
DC=DC1

# tunggu interface wg0
for i in {1..20}; do
  ip link show wg0 &>/dev/null && break
  sleep 1
done

if ! ip link show wg0 &>/dev/null; then
  echo "wg0 tidak ditemukan, pastikan WireGuard aktif." >&2
  exit 1
fi

# Tambah route ke subnet DC2
ip route replace 172.20.2.0/24 via 10.7.0.5 dev wg0


====================== ./dc2/docker-compose.dc2.yml ======================
version: "3.8"

networks:
  intra-ha:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.2.0/24   # subnet khusus DC2

services:
  mysql:
    image: mysql:8.0
    container_name: mysql-dc2
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: rootpass
    volumes:
      - ../mysql/data:/var/lib/mysql
      - ../mysql/my.cnf.dc2:/etc/mysql/conf.d/my.cnf
    networks:
      intra-ha:
        ipv4_address: 172.20.2.10

  haproxy-keepalived:
    image: haproxy:2.8
    container_name: haproxy-keepalived-dc2
    network_mode: "host"
    cap_add:
      - NET_ADMIN
      - NET_BROADCAST
      - NET_RAW
    environment:
      KEEPALIVED_PRIORITY: 100
    volumes:
      - ./haproxy-keepalived/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
      - ./haproxy-keepalived/keepalived.conf:/etc/keepalived/keepalived.conf
    depends_on:
      - mysql


====================== ./dc2/haproxy-keepalived/haproxy.cfg ======================
global
  maxconn 2048

defaults
  log global
  mode tcp
  timeout connect 3s
  timeout client  30s
  timeout server  30s

listen mysql_vip
  bind 10.7.0.10:3306
  option tcplog
  balance first
  server db_local 127.0.0.1:3306 check inter 2s fall 2 rise 2


====================== ./dc2/haproxy-keepalived/keepalived.conf ======================
vrrp_instance VI_10 {
  state BACKUP
  interface wg0
  virtual_router_id 10
  priority 100
  advert_int 1
  authentication {
    auth_type PASS
    auth_pass SomeSecret
  }
  virtual_ipaddress {
    10.7.0.10/24 dev wg0
  }
  track_script {
    chk_mysql
  }
}

vrrp_script chk_mysql {
  script "/usr/local/bin/check-mysql.sh"
  interval 2
  fall 2
  rise 2
}


====================== ./dc2/scripts/auto-route.sh ======================
#!/usr/bin/env bash
set -euo pipefail

DC=DC2

# tunggu interface wg0
for i in {1..20}; do
  ip link show wg0 &>/dev/null && break
  sleep 1
done

if ! ip link show wg0 &>/dev/null; then
  echo "wg0 tidak ditemukan, pastikan WireGuard aktif." >&2
  exit 1
fi

# Tambah route ke subnet DC1
ip route replace 172.20.1.0/24 via 10.7.0.4 dev wg0


====================== ./docs/README.md ======================
# mysql-ha

Cluster **MySQL High Availability** lintas Data Center menggunakan **WireGuard VPN**, **HAProxy**, dan **Keepalived**.

## Struktur Direktori
- `dc1/`, `dc2/` ‚Üí konfigurasi per Data Center (docker-compose, HAProxy, Keepalived, script).
- `mysql/` ‚Üí konfigurasi MySQL Group Replication untuk DC1 & DC2.
- `docs/` ‚Üí catatan & dokumentasi bootstrap.

## Catatan
- WireGuard sudah di-setup langsung di host (bukan container).
- Route antar-subnet container (172.20.1.0/24 ‚Üî 172.20.2.0/24) dilewatkan via `wg0` host.
- Keepalived mengatur VIP `10.7.0.10` di interface `wg0`.
- MySQL dijalankan dengan **Group Replication single-primary**.


====================== ./list_files.sh ======================
#!/bin/bash

# Folder atau file yang akan diabaikan (boleh wildcard)
IGNORED_DIRS=(".git" "node_modules" "*.log" "*.tmp")

# File output gabungan
OUTPUT_FILE="all.txt"
> "$OUTPUT_FILE" # kosongkan file output

print_tree_and_collect() {
    local dir="$1"
    local prefix="$2"
    local items=("$dir"/*)
    local count=${#items[@]}
    local index=0

    for item in "${items[@]}"; do
        local basename=$(basename "$item")

        # Lewati jika cocok dengan pola di IGNORED_DIRS (mendukung wildcard)
        for ignored in "${IGNORED_DIRS[@]}"; do
            if [[ "$basename" == $ignored ]]; then
                continue 2
            fi
        done

        index=$((index + 1))
        local connector="‚îú‚îÄ‚îÄ"
        [[ $index -eq $count ]] && connector="‚îî‚îÄ‚îÄ"

        if [[ -d "$item" ]]; then
            echo "${prefix}${connector} üìÅ $basename/"
            print_tree_and_collect "$item" "${prefix}‚îÇ   "
        elif [[ -f "$item" ]]; then
            echo "${prefix}${connector} üìÑ $basename"

            # Tambahkan isi file ke all.txt
            {
                echo ""
                echo "====================== $item ======================"
                cat "$item"
                echo ""
            } >> "$OUTPUT_FILE"
        fi
    done
}

echo "üìÅ $(basename "$(pwd)")/"
print_tree_and_collect "." "‚îÇ   "

echo ""
echo "‚úÖ Semua isi file tersimpan ke: $OUTPUT_FILE"


====================== ./mysql/my.cnf.dc1 ======================
[mysqld]
server_id=1
bind-address=0.0.0.0
log_bin=binlog
gtid_mode=ON
enforce_gtid_consistency=ON
binlog_checksum=NONE
master_info_repository=TABLE
relay_log_info_repository=TABLE
transaction_write_set_extraction=XXHASH64

# Group Replication
loose-group_replication_group_name="b9a2b7a2-5f4c-4f8c-9b2e-1c1d9f00a001"
loose-group_replication_start_on_boot=OFF
loose-group_replication_local_address="10.7.0.4:33061"
loose-group_replication_group_seeds="10.7.0.4:33061,10.7.0.5:33061"
loose-group_replication_single_primary_mode=ON
loose-group_replication_enforce_update_everywhere_checks=OFF


====================== ./mysql/my.cnf.dc2 ======================
[mysqld]
server_id=2
bind-address=0.0.0.0
log_bin=binlog
gtid_mode=ON
enforce_gtid_consistency=ON
binlog_checksum=NONE
master_info_repository=TABLE
relay_log_info_repository=TABLE
transaction_write_set_extraction=XXHASH64

# Group Replication
loose-group_replication_group_name="b9a2b7a2-5f4c-4f8c-9b2e-1c1d9f00a001"
loose-group_replication_start_on_boot=OFF
loose-group_replication_local_address="10.7.0.5:33061"
loose-group_replication_group_seeds="10.7.0.4:33061,10.7.0.5:33061"
loose-group_replication_single_primary_mode=ON
loose-group_replication_enforce_update_everywhere_checks=OFF

