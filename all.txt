
====================== ./LICENSE ======================
MIT License


====================== ./README.md ======================
üì¶ mysql-ha

Cluster **MySQL + Zabbix High Availability** lintas Data Center menggunakan **WireGuard VPN** dan **HAProxy VIP**.  
Proyek ini menyediakan struktur direktori, konfigurasi, dan contoh deployment untuk membangun replikasi MySQL dengan failover otomatis dan integrasi Zabbix HA.

‚ú® Fitur

üîí WireGuard VPN sebagai tunnel antar-DC.  
üóÑÔ∏è MySQL Group Replication (single-primary) untuk sinkronisasi data.  
‚öñÔ∏è HAProxy di hub sebagai load balancer sekaligus Virtual IP (VIP).  
üìä Zabbix server & frontend berjalan di DC1 dan DC2 dengan HA mode.  
üìÇ Struktur direktori modular (dc1/, dc2/, mysql/, zabbix/, hub/, docs/).

üìÇ Struktur Direktori

mysql-ha/
‚îú‚îÄ‚îÄ dc1/          # Konfigurasi & compose untuk Data Center 1 (MySQL, Zabbix)
‚îú‚îÄ‚îÄ dc2/          # Konfigurasi & compose untuk Data Center 2 (MySQL, Zabbix)
‚îú‚îÄ‚îÄ hub/          # HAProxy VIP untuk MySQL & Zabbix
‚îú‚îÄ‚îÄ mysql/        # Konfigurasi MySQL Group Replication
‚îú‚îÄ‚îÄ zabbix/       # Dockerfile & compose Zabbix server + frontend
‚îú‚îÄ‚îÄ docs/         # Dokumentasi & catatan implementasi

üöÄ Tujuan

- Memberikan kerangka kerja (scaffold) untuk eksperimen dan implementasi MySQL + Zabbix HA lintas DC.  
- Memisahkan konfigurasi per DC agar mudah dimodifikasi sesuai kebutuhan.  
- Mendukung deployment berbasis Docker Compose maupun integrasi ke sistem produksi.

====================== ./dc1/docker-compose.yml ======================
  # === MySQL DC1 ===
  mysql1:
    build:
      context: ../mysql
      dockerfile: Dockerfile
    container_name: mysql1
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: "AndesMysql123!"
    volumes:
      - /opt/mysql:/var/lib/mysql
      - ../mysql/my.cnf.dc1:/etc/mysql/conf.d/my.cnf
      - ../mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3306:3306"
      - "33061:33061"   # üëà tambahkan ini


====================== ./dc1/keepalived/keepalived.conf ======================
global_defs {
    script_user root
    enable_script_security
}

vrrp_instance VI_1 {
    state BACKUP
    interface wg0
    virtual_router_id 51
    priority 200
    advert_int 1
    initial_state BACKUP
    nopreempt
    
    authentication {
        auth_type PASS
        auth_pass 1234
    }

    # Unicast karena WireGuard tidak support multicast
    unicast_src_ip 10.7.0.4
    unicast_peer {
        10.7.0.5
    }

    virtual_ipaddress {
        10.7.0.10/32 dev wg0 label wg0:vip
    }

    notify_master "/etc/keepalived/scripts/notify.sh master"
    notify_backup "/etc/keepalived/scripts/notify.sh backup"
    notify_fault  "/etc/keepalived/scripts/notify.sh fault"
}


====================== ./dc1/keepalived/keepalived.service.d/override.conf ======================
[Unit]
After=network-online.target wg-quick@wg0.service
Wants=network-online.target wg-quick@wg0.service

====================== ./dc1/keepalived/scripts/notify.sh ======================
#!/usr/bin/env bash
set -euo pipefail

TYPE="${1:-}"
LOG="/var/log/keepalived-notify.log"

echo "[$(date '+%F %T')] DC1 VRRP event: $TYPE" >> "$LOG"

case "$TYPE" in
  master)
    # DC1 naik MASTER ‚Üí arahkan route di hub ke db1
    ssh -o StrictHostKeyChecking=no root@10.7.0.1 -q -T "switch-db-route.sh db1" >> "$LOG" 2>&1
    ;;
  backup)
    echo "[$(date '+%F %T')] DC1 masuk BACKUP (no-op)" >> "$LOG"
    ;;
  fault)
    echo "[$(date '+%F %T')] DC1 fault condition" >> "$LOG"
    ;;
esac


====================== ./dc1/zabbix/Dockerfile ======================
FROM zabbix/zabbix-server-mysql:alpine-6.4-latest

LABEL maintainer="Andes Solutions"

# Copy custom config (opsional)
COPY zabbix_server.conf /etc/zabbix/zabbix_server.conf

# Tambahkan package/tools jika perlu
RUN apk add --no-cache bash curl vim

EXPOSE 10051
CMD ["docker-entrypoint.sh"]

====================== ./dc2/docker-compose.yml ======================
  # === MySQL DC2 ===
  mysql2:
    build:
      context: ../mysql
      dockerfile: Dockerfile
    container_name: mysql2
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: "AndesMysql123!"
    volumes:
      - /opt/mysql:/var/lib/mysql
      - ../mysql/my.cnf.dc2:/etc/mysql/conf.d/my.cnf
      - ../mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3306:3306"
      - "33061:33061"   # üëà tambahkan ini


====================== ./dc2/keepalived/keepalived.conf ======================
global_defs {
    script_user root
    enable_script_security
}

vrrp_instance VI_1 {
    state BACKUP
    interface wg0
    virtual_router_id 51
    priority 150
    advert_int 1
    initial_state BACKUP
    nopreempt

    authentication {
        auth_type PASS
        auth_pass 1234
    }

    unicast_src_ip 10.7.0.5
    unicast_peer {
        10.7.0.4
    }

    virtual_ipaddress {
        10.7.0.10/32 dev wg0 label wg0:vip
    }

    notify_master "/etc/keepalived/scripts/notify.sh master"
    notify_backup "/etc/keepalived/scripts/notify.sh backup"
    notify_fault  "/etc/keepalived/scripts/notify.sh fault"
}


====================== ./dc2/keepalived/keepalived.service.d/override.conf ======================
[Unit]
After=network-online.target wg-quick@wg0.service
Wants=network-online.target wg-quick@wg0.service

====================== ./dc2/keepalived/scripts/notify.sh ======================
#!/usr/bin/env bash
set -euo pipefail

TYPE="${1:-}"
LOG="/var/log/keepalived-notify.log"

echo "[$(date '+%F %T')] DC2 VRRP event: $TYPE" >> "$LOG"

case "$TYPE" in
  master)
    # DC2 naik MASTER ‚Üí arahkan route di hub ke db2
    ssh -o StrictHostKeyChecking=no root@10.7.0.1 -q -T "switch-db-route.sh db2" >> "$LOG" 2>&1
    ;;
  backup)
    echo "[$(date '+%F %T')] DC2 masuk BACKUP (no-op)" >> "$LOG"
    ;;
  fault)
    echo "[$(date '+%F %T')] DC2 fault condition" >> "$LOG"
    ;;
esac


====================== ./docs/README.md ======================
# mysql-ha

Cluster **MySQL High Availability + Zabbix HA** lintas Data Center menggunakan **WireGuard VPN** dan **HAProxy VIP**.

## Struktur Direktori
- `dc1/`, `dc2/` ‚Üí konfigurasi per Data Center (docker-compose untuk MySQL & Zabbix).  
- `hub/` ‚Üí HAProxy di hub, menyediakan Virtual IP (VIP) untuk failover.  
- `mysql/` ‚Üí konfigurasi MySQL Group Replication.  
- `zabbix/` ‚Üí konfigurasi Zabbix server & frontend.  
- `docs/` ‚Üí catatan & dokumentasi bootstrap.

## Mekanisme HA
- **Database** direplikasi menggunakan **MySQL Group Replication** (single-primary mode) antara DC1 & DC2.  
- **HAProxy di hub** menyediakan Virtual IP (**10.7.0.100**) untuk semua layanan:  
  - `10.7.0.100:3306` ‚Üí MySQL cluster  
  - `10.7.0.100:10051` ‚Üí Zabbix server  
  - `10.7.0.100:8080` ‚Üí Zabbix frontend (Web UI)  
- **Zabbix Server** berjalan di DC1 & DC2 dengan HA mode (HANodeName berbeda, hanya 1 node aktif).  
- **Zabbix Frontend** tersedia di kedua DC, diakses melalui VIP hub.

## Catatan
- WireGuard harus sudah dikonfigurasi di host (bukan container).  
- Semua container berada dalam network `zabbix_net` (10.11.12.0/24).  
- IP host digunakan untuk komunikasi **Group Replication** antar-DC (10.7.0.4, 10.7.0.5).  
- Tidak ada Keepalived, failover murni di-handle oleh **HAProxy di hub**.

====================== ./git-pull.sh ======================
#!/bin/bash
# Script otomatis git force pull dengan timestamp log

TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")

echo "üîÑ [$TIMESTAMP] Menarik update terbaru (force pull) dari remote..."

# Ambil semua update remote
git fetch --all

# Reset ke remote main (hapus perubahan lokal)
git reset --hard origin/main

echo "‚úÖ [$TIMESTAMP] Force pull selesai (sinkron dengan origin/main)"


====================== ./git-push.sh ======================
#!/bin/bash
# Script otomatis git add, commit, push dengan pesan timestamp

# Ambil timestamp sekarang
TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")

# Jalankan perintah git
echo "üîÑ Menambahkan file ke staging..."
git add .

echo "üìù Commit dengan pesan: update: $TIMESTAMP"
git commit -m "update: $TIMESTAMP"

echo "üöÄ Push ke remote (origin main)..."
git push origin main

====================== ./hub/Dockerfile ======================
FROM haproxy:2.8

LABEL maintainer="Andes Solutions"

# Tambahkan tools troubleshooting
RUN apt-get update && \
    apt-get install -y iputils-ping net-tools iproute2 dnsutils curl vim traceroute tcpdump && \
    rm -rf /var/lib/apt/lists/*

CMD ["haproxy", "-f", "/usr/local/etc/haproxy/haproxy.cfg"]


====================== ./hub/docker-compose.yml ======================
version: '3.8'

services:
  haproxy:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: haproxy-hub
    restart: unless-stopped
    network_mode: "host"
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro


====================== ./hub/haproxy.cfg ======================
global
    log /dev/log local0
    maxconn 2048

defaults
    log global
    mode tcp
    option tcplog
    retries 3
    timeout connect 5s
    timeout client  60s
    timeout server  60s

# =========================
# MySQL Cluster
# =========================
frontend mysql_front
    bind 10.7.0.100:3306
    default_backend mysql_cluster

backend mysql_cluster
    mode tcp
    option tcp-check
    balance first
    server dc1-db 10.7.0.4:3306 check inter 2s fall 3 rise 2
    server dc2-db 10.7.0.5:3306 check inter 2s fall 3 rise 2 backup

# =========================
# Zabbix Server (port 10051)
# =========================
frontend zabbix_server_front
    bind 10.7.0.100:10051
    default_backend zabbix_servers

backend zabbix_servers
    mode tcp
    option tcp-check
    balance first
    server dc1-zbx 10.7.0.4:10051 check inter 2s fall 3 rise 2
    server dc2-zbx 10.7.0.5:10051 check inter 2s fall 3 rise 2 backup

# =========================
# Zabbix Frontend (Web UI)
# =========================
frontend zabbix_web_front
    bind 10.7.0.100:8080
    default_backend zabbix_webs

backend zabbix_webs
    mode tcp
    option tcp-check
    balance first
    server dc1-web 10.7.0.4:8080 check inter 2s fall 3 rise 2
    server dc2-web 10.7.0.5:8080 check inter 2s fall 3 rise 2 backup

====================== ./hub/switch-db-route.sh ======================
#!/usr/bin/env bash
set -euo pipefail

# === KONFIGURASI ===
PEER_DB1='CjSFysbRyWptPxd4HdcRpsjbA8wvtnsMAKUXu92v/Wo='
PEER_DB2='Z9J4PiuLH6cwTtmTgGqP9EuP7Wq4IOdHYtdOef75oVE='
WG_IF='wg0'
SUBNET='10.7.0.10/32'
WG_NET='10.7.0.0/24'
LOG='/var/log/switch-db-route.log'

log(){ echo "[$(date +'%F %T')] $*" | tee -a "$LOG"; }

require(){
  command -v "$1" >/dev/null 2>&1 || { echo "Missing $1"; exit 1; }
}

require wg
require ip

TARGET="${1:-}"
if [[ "$TARGET" != "db1" && "$TARGET" != "db2" ]]; then
  echo "Usage: $0 {db1|db2}"
  exit 2
fi

log "Switching $SUBNET via $TARGET"

# Pastikan rute besar diarahkan ke wg0, biar failover nggak perlu ubah route
ip route replace "$SUBNET" dev "$WG_IF" || true

if [[ "$TARGET" == "db1" ]]; then
  wg set "$WG_IF" peer "$PEER_DB1" allowed-ips 10.7.0.4/32,"$SUBNET"
  wg set "$WG_IF" peer "$PEER_DB2" allowed-ips 10.7.0.5/32
else
  wg set "$WG_IF" peer "$PEER_DB1" allowed-ips 10.7.0.4/32
  wg set "$WG_IF" peer "$PEER_DB2" allowed-ips 10.7.0.5/32,"$SUBNET"
fi

# Verifikasi
sleep 1
WG_SHOW="$(wg show)"
echo "$WG_SHOW" | grep -q "$SUBNET" || { log "ERROR: $SUBNET belum terpasang di AllowedIPs mana pun"; exit 3; }

# Pastikan kernel routing benar
ip route get "$(echo "$SUBNET" | cut -d/ -f1)" >/dev/null 2>&1 || {
  log "WARNING: ip route get gagal ‚Äî cek tabel route"
}

log "OK: $SUBNET via $TARGET"
exit 0

====================== ./list_files.sh ======================
#!/bin/bash

# Folder atau file yang akan diabaikan (boleh wildcard)
IGNORED_DIRS=(".git" "node_modules" "*.log" "*.txt")

# File output gabungan
OUTPUT_FILE="all.txt"
> "$OUTPUT_FILE" # kosongkan file output

print_tree_and_collect() {
    local dir="$1"
    local prefix="$2"
    local items=("$dir"/*)
    local count=${#items[@]}
    local index=0

    for item in "${items[@]}"; do
        local basename=$(basename "$item")

        # Lewati jika cocok dengan pola di IGNORED_DIRS (mendukung wildcard)
        for ignored in "${IGNORED_DIRS[@]}"; do
            if [[ "$basename" == $ignored ]]; then
                continue 2
            fi
        done

        index=$((index + 1))
        local connector="‚îú‚îÄ‚îÄ"
        [[ $index -eq $count ]] && connector="‚îî‚îÄ‚îÄ"

        if [[ -d "$item" ]]; then
            echo "${prefix}${connector} üìÅ $basename/"
            print_tree_and_collect "$item" "${prefix}‚îÇ   "
        elif [[ -f "$item" ]]; then
            echo "${prefix}${connector} üìÑ $basename"

            # Tambahkan isi file ke all.txt
            {
                echo ""
                echo "====================== $item ======================"
                cat "$item"
                echo ""
            } >> "$OUTPUT_FILE"
        fi
    done
}

echo "üìÅ $(basename "$(pwd)")/"
print_tree_and_collect "." "‚îÇ   "

echo ""
echo "‚úÖ Semua isi file tersimpan ke: $OUTPUT_FILE"


====================== ./mysql/Dockerfile ======================
FROM mysql:8.0.30

LABEL maintainer="Andes Solutions"

# Tambahkan tools troubleshooting
RUN microdnf install -y iputils net-tools iproute dnsutils curl vim traceroute tcpdump && \
    microdnf clean all

CMD ["mysqld"]


====================== ./mysql/bootstrap_gr.sh ======================
#!/usr/bin/env bash
set -euo pipefail

# =====================================
# Script bootstrap Group Replication
# DC1 = mysql1 (10.7.0.4)
# DC2 = mysql2 (10.7.0.5)
# =====================================

ROOT_PASS="AndesMysql123!"
REPL_USER="repl"
REPL_PASS="AndesRepl!"
SQL_FILE="$(dirname "$0")/bootstrap_gr.sql"

log() { echo "[$(date '+%F %T')] $*"; }

# Pastikan parameter
if [[ $# -eq 0 ]]; then
  echo "‚ùå Harus ada parameter: dc1 atau dc2"
  echo "   Contoh:"
  echo "     ./bootstrap_gr.sh dc1"
  echo "     ./bootstrap_gr.sh dc2"
  exit 1
fi

NODE="$1"

# Pastikan file SQL ada
if [[ ! -f "$SQL_FILE" ]]; then
  echo "‚ùå File $SQL_FILE tidak ditemukan"
  exit 1
fi

case "$NODE" in
  dc1)
    log "Apply SQL ke mysql1 (DC1)..."
    docker exec -i mysql1 mysql -uroot -p"$ROOT_PASS" < "$SQL_FILE"

    log "Bootstrap cluster di mysql1 (DC1)..."
    docker exec -i mysql1 mysql -uroot -p"$ROOT_PASS" <<EOF
SET GLOBAL group_replication_bootstrap_group=ON;
START GROUP_REPLICATION USER='$REPL_USER', PASSWORD='$REPL_PASS';
SET GLOBAL group_replication_bootstrap_group=OFF;
EOF
    ;;

  dc2)
    log "Apply SQL ke mysql2 (DC2)..."
    docker exec -i mysql2 mysql -uroot -p"$ROOT_PASS" < "$SQL_FILE"

    log "Join cluster di mysql2 (DC2)..."
    docker exec -i mysql2 mysql -uroot -p"$ROOT_PASS" <<EOF
START GROUP_REPLICATION USER='$REPL_USER', PASSWORD='$REPL_PASS';
EOF
    ;;

  *)
    echo "‚ùå Parameter tidak valid: $NODE"
    echo "Gunakan: dc1 atau dc2"
    exit 1
    ;;
esac

# =====================================
# Cek status cluster (dari DC1 saja)
# =====================================
if [[ "$NODE" == "dc1" ]]; then
  log "Cek status cluster dari DC1..."
  docker exec -i mysql1 mysql -uroot -p"$ROOT_PASS" -e "
  SELECT MEMBER_HOST, MEMBER_ROLE, MEMBER_STATE
  FROM performance_schema.replication_group_members;
  "
fi

log "‚úÖ Bootstrap selesai untuk $NODE"


====================== ./mysql/bootstrap_gr.sql ======================
-- =====================================================
-- Bootstrap MySQL Group Replication untuk DC1 & DC2
-- DC1 = 10.7.0.4, DC2 = 10.7.0.5
-- =====================================================

-- 1. Install plugin Group Replication
INSTALL PLUGIN group_replication SONAME 'group_replication.so';

-- 2. Buat user repl
DROP USER IF EXISTS 'repl'@'%';
CREATE USER 'repl'@'%' IDENTIFIED BY 'AndesRepl!';
GRANT REPLICATION SLAVE ON *.* TO 'repl'@'%';
FLUSH PRIVILEGES;

-- 3. Pastikan fungsi boleh direplikasi
SET GLOBAL log_bin_trust_function_creators = 1;

-- Catatan:
-- Jalankan SET GLOBAL group_replication_bootstrap_group=ON hanya di DC1
-- Setelah start, segera OFF-kan lagi.


====================== ./mysql/init.sql ======================
DROP DATABASE IF EXISTS zabbix;
CREATE DATABASE zabbix CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;

DROP USER IF EXISTS 'zabbix'@'%';
CREATE USER 'zabbix'@'%' IDENTIFIED BY 'AndesZabbix!';
GRANT ALL PRIVILEGES ON zabbix.* TO 'zabbix'@'%';

SET GLOBAL log_bin_trust_function_creators = 1;

====================== ./mysql/my.cnf.dc1 ======================
[mysqld]
server_id=1
bind-address=0.0.0.0

# Binary log & GTID (wajib untuk Group Replication)
log_bin=binlog
binlog_format=ROW
gtid_mode=ON
enforce_gtid_consistency=ON
binlog_checksum=NONE
master_info_repository=TABLE
relay_log_info_repository=TABLE
transaction_write_set_extraction=XXHASH64

# Load plugin Group Replication
plugin-load-add=group_replication.so

# Group Replication Config
loose-group_replication_group_name="b9a2b7a2-5f4c-4f8c-9b2e-1c1d9f00a001"
loose-group_replication_start_on_boot=OFF
loose-group_replication_bootstrap_group=OFF
loose-group_replication_local_address="10.7.0.4:33061"
loose-group_replication_group_seeds="10.7.0.4:33061,10.7.0.5:33061,10.7.0.6:33061"

# Mode single-primary
loose-group_replication_single_primary_mode=ON
loose-group_replication_enforce_update_everywhere_checks=OFF

# Allowlist antar node
loose-group_replication_ip_allowlist="10.7.0.4,10.7.0.5,10.7.0.6"


====================== ./mysql/my.cnf.dc2 ======================
[mysqld]
server_id=2
bind-address=0.0.0.0

log_bin=binlog
binlog_format=ROW
gtid_mode=ON
enforce_gtid_consistency=ON
binlog_checksum=NONE
master_info_repository=TABLE
relay_log_info_repository=TABLE
transaction_write_set_extraction=XXHASH64

plugin-load-add=group_replication.so

loose-group_replication_group_name="b9a2b7a2-5f4c-4f8c-9b2e-1c1d9f00a001"
loose-group_replication_start_on_boot=OFF
loose-group_replication_bootstrap_group=OFF
loose-group_replication_local_address="10.7.0.5:33061"
loose-group_replication_group_seeds="10.7.0.4:33061,10.7.0.5:33061,10.7.0.6:33061"

loose-group_replication_single_primary_mode=ON
loose-group_replication_enforce_update_everywhere_checks=OFF

loose-group_replication_ip_allowlist="10.7.0.4,10.7.0.5,10.7.0.6"


====================== ./mysql/reset_gr.sh ======================
#!/usr/bin/env bash
set -euo pipefail

ROOT_PASS="AndesMysql123!"

log() { echo "[$(date '+%F %T')] $*"; }

# Pastikan parameter
if [[ $# -eq 0 ]]; then
  echo "‚ùå Harus ada parameter: dc1 atau dc2"
  echo "   Contoh: ./reset_gr.sh dc1"
  echo "           ./reset_gr.sh dc2"
  exit 1
fi

NODE="$1"
CONTAINER=""

case "$NODE" in
  dc1) CONTAINER="mysql1" ;;
  dc2) CONTAINER="mysql2" ;;
  *)
    echo "‚ùå Parameter tidak valid: $NODE"
    echo "Gunakan: dc1 atau dc2"
    exit 2
    ;;
esac

log "üëâ Reset $NODE ($CONTAINER)..."

docker exec -i "$CONTAINER" mysql -uroot -p"$ROOT_PASS" <<EOF || true
STOP GROUP_REPLICATION;
UNINSTALL PLUGIN group_replication;
DROP USER IF EXISTS 'repl'@'%';
EOF

docker exec -i "$CONTAINER" rm -f /var/lib/mysql/auto.cnf || true

docker restart "$CONTAINER"

log "‚úÖ $NODE ($CONTAINER) selesai direset"
log "‚ÑπÔ∏è Jalankan bootstrap_gr.sh $NODE untuk inisialisasi ulang"


====================== ./rebuild.sh ======================
#!/usr/bin/env bash
set -euo pipefail

BASE_DIR="$(dirname "$0")"

if [[ $# -eq 0 ]]; then
  echo "‚ùå Harus ada parameter! Contoh:"
  echo "   ./rebuild.sh dc1"
  echo "   ./rebuild.sh dc2"
  echo "   ./rebuild.sh hub"
  exit 1
fi

TARGET="$1"
TARGET_DIR="$BASE_DIR/$TARGET"

if [[ ! -d "$TARGET_DIR" ]]; then
  echo "‚ùå Folder $TARGET_DIR tidak ditemukan!"
  exit 2
fi

echo "üöÄ Rebuild docker compose untuk: $TARGET"
echo "========================================="

cd "$TARGET_DIR"

echo "üî® docker compose build..."
docker compose build --no-cache

echo "‚¨ÜÔ∏è docker compose up -d..."
docker compose up -d

echo "‚úÖ $TARGET selesai"

echo ""
echo "üéâ Service $TARGET berhasil direbuild & dijalankan!"


====================== ./zabbix/Dockerfile.server ======================
FROM zabbix/zabbix-server-mysql:alpine-6.4-latest

LABEL maintainer="Andes Solutions"

USER root
RUN apk add --no-cache bash curl vim iputils bind-tools net-tools iproute2 tcpdump
USER zabbix

EXPOSE 10051
CMD ["docker-entrypoint.sh"]


====================== ./zabbix/Dockerfile.web ======================
FROM zabbix/zabbix-web-nginx-mysql:alpine-6.4-latest

LABEL maintainer="Andes Solutions"

USER root
RUN apk add --no-cache bash curl vim iputils bind-tools net-tools iproute2 tcpdump
USER zabbix

EXPOSE 8080
CMD ["docker-entrypoint.sh"]

