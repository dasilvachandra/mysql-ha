
====================== ./LICENSE ======================
MIT License


====================== ./README.md ======================
üì¶ mysql-ha

Cluster **MySQL + Zabbix High Availability** lintas Data Center menggunakan **WireGuard VPN** dan **HAProxy VIP**.  
Proyek ini menyediakan struktur direktori, konfigurasi, dan contoh deployment untuk membangun replikasi MySQL dengan failover otomatis dan integrasi Zabbix HA.

‚ú® Fitur

üîí WireGuard VPN sebagai tunnel antar-DC.  
üóÑÔ∏è MySQL Group Replication (single-primary) untuk sinkronisasi data.  
‚öñÔ∏è HAProxy di hub sebagai load balancer sekaligus Virtual IP (VIP).  
üìä Zabbix server & frontend berjalan di DC1 dan DC2 dengan HA mode.  
üìÇ Struktur direktori modular (dc1/, dc2/, mysql/, zabbix/, hub/, docs/).

üìÇ Struktur Direktori

mysql-ha/
‚îú‚îÄ‚îÄ dc1/          # Konfigurasi & compose untuk Data Center 1 (MySQL, Zabbix)
‚îú‚îÄ‚îÄ dc2/          # Konfigurasi & compose untuk Data Center 2 (MySQL, Zabbix)
‚îú‚îÄ‚îÄ hub/          # HAProxy VIP untuk MySQL & Zabbix
‚îú‚îÄ‚îÄ mysql/        # Konfigurasi MySQL Group Replication
‚îú‚îÄ‚îÄ zabbix/       # Dockerfile & compose Zabbix server + frontend
‚îú‚îÄ‚îÄ docs/         # Dokumentasi & catatan implementasi

üöÄ Tujuan

- Memberikan kerangka kerja (scaffold) untuk eksperimen dan implementasi MySQL + Zabbix HA lintas DC.  
- Memisahkan konfigurasi per DC agar mudah dimodifikasi sesuai kebutuhan.  
- Mendukung deployment berbasis Docker Compose maupun integrasi ke sistem produksi.

====================== ./dc1/docker-compose.dc1.yml ======================
version: '3.8'

networks:
  zabbix_net:
    driver: bridge
    ipam:
      config:
        - subnet: 10.11.12.0/24

services:
  mysql1:
    image: mysql:8.0.30
    container_name: mysql1
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: "AndesMysql123!"
    volumes:
      - /opt/mysql:/var/lib/mysql
      - ../mysql/my.cnf.dc1:/etc/mysql/conf.d/my.cnf
      - ../mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3306:3306"
    networks:
      zabbix_net:
        ipv4_address: 10.11.12.2

====================== ./dc1/zabbix/Dockerfile ======================
FROM zabbix/zabbix-server-mysql:alpine-6.4-latest

LABEL maintainer="Andes Solutions"

# Copy custom config (opsional)
COPY zabbix_server.conf /etc/zabbix/zabbix_server.conf

# Tambahkan package/tools jika perlu
RUN apk add --no-cache bash curl vim

EXPOSE 10051
CMD ["docker-entrypoint.sh"]

====================== ./dc2/docker-compose.dc2.yml ======================
version: '3.8'

networks:
  zabbix_net:
    driver: bridge
    ipam:
      config:
        - subnet: 10.11.12.0/24

services:
  mysql2:
    image: mysql:8.0.30
    container_name: mysql2
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: "AndesMysql123!"
    volumes:
      - /opt/mysql:/var/lib/mysql
      - ../mysql/my.cnf.dc2:/etc/mysql/conf.d/my.cnf
      - ../mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3306:3306"
    networks:
      zabbix_net:
        ipv4_address: 10.11.12.3

====================== ./docs/README.md ======================
# mysql-ha

Cluster **MySQL High Availability + Zabbix HA** lintas Data Center menggunakan **WireGuard VPN** dan **HAProxy VIP**.

## Struktur Direktori
- `dc1/`, `dc2/` ‚Üí konfigurasi per Data Center (docker-compose untuk MySQL & Zabbix).  
- `hub/` ‚Üí HAProxy di hub, menyediakan Virtual IP (VIP) untuk failover.  
- `mysql/` ‚Üí konfigurasi MySQL Group Replication.  
- `zabbix/` ‚Üí konfigurasi Zabbix server & frontend.  
- `docs/` ‚Üí catatan & dokumentasi bootstrap.

## Mekanisme HA
- **Database** direplikasi menggunakan **MySQL Group Replication** (single-primary mode) antara DC1 & DC2.  
- **HAProxy di hub** menyediakan Virtual IP (**10.7.0.100**) untuk semua layanan:  
  - `10.7.0.100:3306` ‚Üí MySQL cluster  
  - `10.7.0.100:10051` ‚Üí Zabbix server  
  - `10.7.0.100:8080` ‚Üí Zabbix frontend (Web UI)  
- **Zabbix Server** berjalan di DC1 & DC2 dengan HA mode (HANodeName berbeda, hanya 1 node aktif).  
- **Zabbix Frontend** tersedia di kedua DC, diakses melalui VIP hub.

## Catatan
- WireGuard harus sudah dikonfigurasi di host (bukan container).  
- Semua container berada dalam network `zabbix_net` (10.11.12.0/24).  
- IP host digunakan untuk komunikasi **Group Replication** antar-DC (10.7.0.4, 10.7.0.5).  
- Tidak ada Keepalived, failover murni di-handle oleh **HAProxy di hub**.

====================== ./hub/docker-compose.yml ======================
version: '3.8'

services:
  haproxy:
    image: haproxy:2.8
    container_name: haproxy-hub
    restart: unless-stopped
    network_mode: "host"   # supaya bisa listen langsung ke IP VIP hub
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro

====================== ./hub/haproxy.cfg ======================
global
    log /dev/log local0
    maxconn 2048

defaults
    log global
    mode tcp
    option tcplog
    retries 3
    timeout connect 5s
    timeout client  60s
    timeout server  60s

# =========================
# MySQL Cluster
# =========================
frontend mysql_front
    bind 10.7.0.100:3306
    default_backend mysql_cluster

backend mysql_cluster
    mode tcp
    option tcp-check
    tcp-check connect port 3306
    balance first
    server dc1-db 10.11.12.2:3306 check inter 2s fall 3 rise 2
    server dc2-db 10.11.12.4:3306 check inter 2s fall 3 rise 2 backup

# =========================
# Zabbix Server (port 10051)
# =========================
frontend zabbix_server_front
    bind 10.7.0.100:10051
    default_backend zabbix_servers

backend zabbix_servers
    mode tcp
    option tcp-check
    balance first
    server dc1-zbx 10.7.0.2:10051 check inter 2s fall 3 rise 2
    server dc2-zbx 10.7.0.3:10051 check inter 2s fall 3 rise 2 backup

# =========================
# Zabbix Frontend (Web UI)
# =========================
frontend zabbix_web_front
    bind 10.7.0.100:8080
    default_backend zabbix_webs

backend zabbix_webs
    mode tcp
    option tcp-check
    balance first
    server dc1-web 10.7.0.4:8080 check inter 2s fall 3 rise 2
    server dc2-web 10.7.0.5:8080 check inter 2s fall 3 rise 2 backup

====================== ./list_files.sh ======================
#!/bin/bash

# Folder atau file yang akan diabaikan (boleh wildcard)
IGNORED_DIRS=(".git" "node_modules" "*.log" "*.txt")

# File output gabungan
OUTPUT_FILE="all.txt"
> "$OUTPUT_FILE" # kosongkan file output

print_tree_and_collect() {
    local dir="$1"
    local prefix="$2"
    local items=("$dir"/*)
    local count=${#items[@]}
    local index=0

    for item in "${items[@]}"; do
        local basename=$(basename "$item")

        # Lewati jika cocok dengan pola di IGNORED_DIRS (mendukung wildcard)
        for ignored in "${IGNORED_DIRS[@]}"; do
            if [[ "$basename" == $ignored ]]; then
                continue 2
            fi
        done

        index=$((index + 1))
        local connector="‚îú‚îÄ‚îÄ"
        [[ $index -eq $count ]] && connector="‚îî‚îÄ‚îÄ"

        if [[ -d "$item" ]]; then
            echo "${prefix}${connector} üìÅ $basename/"
            print_tree_and_collect "$item" "${prefix}‚îÇ   "
        elif [[ -f "$item" ]]; then
            echo "${prefix}${connector} üìÑ $basename"

            # Tambahkan isi file ke all.txt
            {
                echo ""
                echo "====================== $item ======================"
                cat "$item"
                echo ""
            } >> "$OUTPUT_FILE"
        fi
    done
}

echo "üìÅ $(basename "$(pwd)")/"
print_tree_and_collect "." "‚îÇ   "

echo ""
echo "‚úÖ Semua isi file tersimpan ke: $OUTPUT_FILE"


====================== ./mysql/init.sql ======================
DROP DATABASE IF EXISTS zabbix;
CREATE DATABASE zabbix CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;

DROP USER IF EXISTS 'zabbix'@'%';
CREATE USER 'zabbix'@'%' IDENTIFIED BY 'AndesZabbix!';
GRANT ALL PRIVILEGES ON zabbix.* TO 'zabbix'@'%';

SET GLOBAL log_bin_trust_function_creators = 1;

====================== ./mysql/my.cnf.dc1 ======================
[mysqld]
server_id=1
bind-address=0.0.0.0
log_bin=binlog
gtid_mode=ON
enforce_gtid_consistency=ON
binlog_checksum=NONE
master_info_repository=TABLE
relay_log_info_repository=TABLE
transaction_write_set_extraction=XXHASH64

# Group Replication
loose-group_replication_group_name="b9a2b7a2-5f4c-4f8c-9b2e-1c1d9f00a001"
loose-group_replication_start_on_boot=OFF
loose-group_replication_local_address="10.7.0.4:33061"
loose-group_replication_group_seeds="10.7.0.4:33061,10.7.0.5:33061"
loose-group_replication_single_primary_mode=ON
loose-group_replication_enforce_update_everywhere_checks=OFF

====================== ./mysql/my.cnf.dc2 ======================
[mysqld]
server_id=2
bind-address=0.0.0.0
log_bin=binlog
gtid_mode=ON
enforce_gtid_consistency=ON
binlog_checksum=NONE
master_info_repository=TABLE
relay_log_info_repository=TABLE
transaction_write_set_extraction=XXHASH64

# Group Replication
loose-group_replication_group_name="b9a2b7a2-5f4c-4f8c-9b2e-1c1d9f00a001"
loose-group_replication_start_on_boot=OFF
loose-group_replication_local_address="10.7.0.5:33061"
loose-group_replication_group_seeds="10.7.0.4:33061,10.7.0.5:33061"
loose-group_replication_single_primary_mode=ON
loose-group_replication_enforce_update_everywhere_checks=OFF
