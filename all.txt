
====================== ./LICENSE ======================
MIT License


====================== ./README.md ======================
üì¶ mysql-ha

Cluster **MySQL + Zabbix High Availability** lintas Data Center menggunakan **WireGuard VPN** dan **Keepalived VIP**.  
Proyek ini menyediakan struktur direktori, konfigurasi, dan contoh deployment untuk membangun replikasi MySQL dengan failover otomatis dan integrasi Zabbix HA.

‚ú® Fitur

- üîí **WireGuard VPN** sebagai tunnel antar-DC.  
- üóÑÔ∏è **MySQL Group Replication (single-primary)** untuk sinkronisasi data.  
- ‚öñÔ∏è **Keepalived** di DC1/DC2 sebagai pengelola Virtual IP (VIP).  
- üìä **Zabbix server & frontend** berjalan di DC1 dan DC2 dengan HA mode.  
- üìÇ Struktur direktori modular (dc1/, dc2/, mysql/, zabbix/, docs/).  

üìÇ Struktur Direktori
mysql-ha/
‚îú‚îÄ‚îÄ dc1/ # Konfigurasi & compose untuk Data Center 1 (MySQL, Zabbix, Keepalived)
‚îú‚îÄ‚îÄ dc2/ # Konfigurasi & compose untuk Data Center 2 (MySQL, Zabbix, Keepalived)
‚îú‚îÄ‚îÄ mysql/ # Konfigurasi MySQL Group Replication & init SQL
‚îú‚îÄ‚îÄ zabbix/ # Dockerfile & compose Zabbix server + frontend
‚îú‚îÄ‚îÄ docs/ # Dokumentasi & catatan implementasi


üöÄ Tujuan

- Memberikan kerangka kerja (scaffold) untuk eksperimen dan implementasi **MySQL + Zabbix HA** lintas DC.  
- Memisahkan konfigurasi per DC agar mudah dimodifikasi sesuai kebutuhan.  
- Mendukung deployment berbasis Docker Compose maupun integrasi ke sistem produksi.  
- Menjamin ketersediaan layanan monitoring meski salah satu DC down (failover otomatis via

====================== ./dc1/docker-compose.yml ======================
version: "3.9"

services:
  # =========================
  # MySQL DC1 (10.7.0.4)
  # =========================
  mysql1:
    build:
      context: ../mysql
      dockerfile: Dockerfile
    container_name: mysql1
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: "abcdef"
      TZ: "Asia/Jakarta"
    volumes:
      - /opt/mysql:/var/lib/mysql
      - ../mysql/my.cnf.dc1:/etc/mysql/conf.d/my.cnf:ro
      - ../mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ../mysql/dc1.sql:/docker-entrypoint-initdb.d/dc1.sql:ro 
    # HANYA expose 3306 (tidak pakai host network)
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -uroot -p$${MYSQL_ROOT_PASSWORD} --silent"]
      interval: 10s
      timeout: 3s
      retries: 20

  # =========================
  # Zabbix Server DC1
  # =========================
  zabbix-server:
    build:
      context: ../zabbix
      dockerfile: Dockerfile.server
    container_name: zbx-server-dc1
    restart: unless-stopped
    environment:
      DB_SERVER_HOST: "10.7.0.10"     # VIP DB (ikut failover)
      MYSQL_DATABASE: "zabbix"
      MYSQL_USER: "zabbix"
      MYSQL_PASSWORD: "AndesZabbix!"
      HANodeName: "dc1"
      TZ: "Asia/Jakarta"
    # publish ke host agar HAProxy (host net) bisa forward ke 127.0.0.1:10051
    ports:
      - "10051:10051"
    depends_on:
      - mysql1
    healthcheck:
      test: ["CMD-SHELL", "timeout 3 bash -lc '</dev/tcp/127.0.0.1/10051' || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 30

  # =========================
  # Zabbix Web DC1
  # =========================
  zabbix-web:
    build:
      context: ../zabbix
      dockerfile: Dockerfile.web
    container_name: zbx-web-dc1
    restart: unless-stopped
    environment:
      DB_SERVER_HOST: "10.7.0.10"     # VIP DB
      MYSQL_DATABASE: "zabbix"
      MYSQL_USER: "zabbix"
      MYSQL_PASSWORD: "AndesZabbix!"
      ZBX_SERVER_HOST: "zbx-server-dc1"
      PHP_TZ: "Asia/Jakarta"
    ports:
      - "8080:8080"                   # HAProxy konsumsi di 127.0.0.1:8080
    depends_on:
      - zabbix-server
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:8080/ || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 30

====================== ./dc1/keepalived/keepalived.conf ======================
global_defs {
  script_user root
  enable_script_security
}

# Cek MySQL DC1: sukses hanya jika read_only=0 (siap menulis)
vrrp_script chk_mysql {
  script "/etc/keepalived/scripts/is_primary.sh"
  interval 5
  timeout 3
  fall 2        # butuh 2x gagal berturut-turut untuk dianggap down
  rise 1        # sekali sehat langsung dianggap up
}

vrrp_instance VI_DB {
  state BACKUP
  initial_state BACKUP
  interface wg0
  virtual_router_id 51
  priority 200
  advert_int 1
  nopreempt

  authentication {
    auth_type PASS
    auth_pass 1234
  }

  unicast_src_ip 10.7.0.4
  unicast_peer {
    10.7.0.5
  }

  # VIP di atas WireGuard
  virtual_ipaddress {
    10.7.0.10/32 dev wg0 label wg0:vip
  }

  # Pastikan hanya naik kalau MySQL writeable
  track_script {
    chk_mysql
  }

  # Opsional: pastikan interface wg0 juga dilacak
  track_interface {
    wg0
  }

  # Banjirkan GARP sesaat setelah jadi MASTER agar ARP table klien cepat update
  garp_master_delay 1
  garp_master_repeat 5
  garp_master_refresh 10
  garp_master_refresh_repeat 2

  notify_master "/etc/keepalived/scripts/notify.sh master"
  notify_backup "/etc/keepalived/scripts/notify.sh backup"
  notify_fault  "/etc/keepalived/scripts/notify.sh fault"
}


====================== ./dc1/keepalived/keepalived.service.d/override.conf ======================
[Unit]
After=network-online.target wg-quick@wg0.service
Wants=network-online.target wg-quick@wg0.service

====================== ./dc1/keepalived/scripts/demote_dc1.sql ======================
-- Demote DC1 ke replica mengikuti VIP
SET GLOBAL super_read_only=1;
SET GLOBAL read_only=1;
STOP REPLICA;
RESET REPLICA ALL;
CHANGE REPLICATION SOURCE TO
  SOURCE_HOST           = '10.7.0.10',
  SOURCE_PORT           = 3306,
  SOURCE_USER           = 'rep1',
  SOURCE_PASSWORD       = 'abcdef',
  SOURCE_AUTO_POSITION  = 1,
  GET_SOURCE_PUBLIC_KEY = 1;
START REPLICA;


====================== ./dc1/keepalived/scripts/is_primary.sh ======================
#!/usr/bin/env bash
set -euo pipefail
docker exec -i mysql1 mysql -uroot -pabcdef -Nse "SELECT @@read_only" 2>/dev/null | grep -qx "0"


====================== ./dc1/keepalived/scripts/notify.sh ======================
#!/usr/bin/env bash
set -euo pipefail

TYPE="${1:-}"
LOG="/var/log/keepalived-notify.log"

# MySQL lokal (di container)
MYSQL_CMD="docker exec -i mysql1 mysql -uroot -pabcdef"

# MySQL remote (langsung TCP)
REMOTE_MYSQL="mysql -h10.7.0.5 -uha -pHaPassw0rd! --connect-timeout=3"

# File SQL lokal (DC1) & remote (DC2)
SQL_PROMOTE_LOCAL="/etc/keepalived/scripts/promote_dc1.sql"
SQL_DEMOTE_LOCAL="/etc/keepalived/scripts/demote_dc1.sql"
SQL_PROMOTE_REMOTE="/etc/keepalived/scripts/promote_dc2.sql"
SQL_DEMOTE_REMOTE="/etc/keepalived/scripts/demote_dc2.sql"

# Hub (opsional)
HUB="10.7.0.1"
SSH_OPTS="-o StrictHostKeyChecking=no -q -T"

ts(){ date '+%F %T'; }
log(){ echo "[$(ts)] $*" | tee -a "$LOG"; }

# Helper cek read_only remote
remote_ro(){
  mysql -h10.7.0.5 -uha -pHaPassw0rd! -Nse "SELECT @@read_only" 2>/dev/null || echo "ERR"
}

echo "[$(ts)] DC1 VRRP event: $TYPE" >> "$LOG"

case "$TYPE" in
  master)
    # 1) DEMOTE PEER dulu ‚Üí replica ke VIP (anti dual-writer)
    log "Demote DC2 ke REPLICA (VIP)"
    if ! $REMOTE_MYSQL < "$SQL_DEMOTE_REMOTE" >> "$LOG" 2>&1; then
      log "ERROR: demote DC2 gagal ‚Üí ABORT promote (hindari dual-writer)"
      exit 1
    fi
    rro="$(remote_ro)"
    [[ "$rro" == "1" ]] || log "WARNING: verifikasi remote @@read_only=$rro"

    # 2) PROMOTE lokal (DC1) jadi writer
    log "Promote DC1 jadi WRITER"
    $MYSQL_CMD < "$SQL_PROMOTE_LOCAL" >> "$LOG" 2>&1

    # 3) Switch route di HUB ke db1 (setelah writer siap)
    ssh $SSH_OPTS "root@$HUB" "switch-db-route.sh db1" >> "$LOG" 2>&1 || true

    log "Sukses MASTER handler: DC1 WRITER, DC2 REPLICA"
    ;;

  backup)
    # 1) DEMOTE lokal (DC1) ‚Üí replica ke VIP
    log "Demote DC1 ke REPLICA (VIP)"
    $MYSQL_CMD < "$SQL_DEMOTE_LOCAL" >> "$LOG" 2>&1 || { log "ERROR: demote DC1 gagal"; exit 1; }

    # 2) PROMOTE remote (DC2) jadi writer (best-effort)
    log "Promote DC2 jadi WRITER"
    $REMOTE_MYSQL < "$SQL_PROMOTE_REMOTE" >> "$LOG" 2>&1 || log "WARNING: promote DC2 gagal (cek manual)"

    # 3) Switch route di HUB ke db2
    ssh $SSH_OPTS "root@$HUB" "switch-db-route.sh db2" >> "$LOG" 2>&1 || true

    log "Sukses BACKUP handler: DC1 REPLICA, DC2 WRITER"
    ;;

  fault)
    log "DC1 fault condition (no-op)"
    ;;

  *)
    log "Event tidak dikenal: $TYPE"
    ;;
esac


====================== ./dc1/keepalived/scripts/notify_v1.sh ======================
#!/usr/bin/env bash
set -euo pipefail

TYPE="${1:-}"
LOG="/var/log/keepalived-notify.log"

echo "[$(date '+%F %T')] DC1 VRRP event: $TYPE" >> "$LOG"

case "$TYPE" in
  master)
    # DC1 naik MASTER ‚Üí arahkan route di hub ke db1
    ssh -o StrictHostKeyChecking=no root@10.7.0.1 -q -T "switch-db-route.sh db1" >> "$LOG" 2>&1
    ;;
  backup)
    echo "[$(date '+%F %T')] DC1 masuk BACKUP (no-op)" >> "$LOG"
    ;;
  fault)
    echo "[$(date '+%F %T')] DC1 fault condition" >> "$LOG"
    ;;
esac


====================== ./dc1/keepalived/scripts/promote_dc1.sql ======================
-- Promote DC1 (writer)
STOP REPLICA;
RESET REPLICA ALL;
SET GLOBAL super_read_only=0;
SET GLOBAL read_only=0;


====================== ./dc1/zabbix/Dockerfile ======================
FROM zabbix/zabbix-server-mysql:alpine-6.4-latest

LABEL maintainer="Andes Solutions"

# Copy custom config (opsional)
COPY zabbix_server.conf /etc/zabbix/zabbix_server.conf

# Tambahkan package/tools jika perlu
RUN apk add --no-cache bash curl vim

EXPOSE 10051
CMD ["docker-entrypoint.sh"]

====================== ./dc2/docker-compose.yml ======================
version: "3.9"

services:
  # =========================
  # MySQL DC2 (10.7.0.5)
  # =========================
  mysql2:
    build:
      context: ../mysql
      dockerfile: Dockerfile
    container_name: mysql2
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: "abcdef"
      TZ: "Asia/Jakarta"
    volumes:
      - /opt/mysql:/var/lib/mysql
      - ../mysql/my.cnf.dc2:/etc/mysql/conf.d/my.cnf:ro
      - ../mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ../mysql/dc2.sql:/docker-entrypoint-initdb.d/dc2.sql:ro 
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -uroot -p$${MYSQL_ROOT_PASSWORD} --silent"]
      interval: 10s
      timeout: 3s
      retries: 20

  # =========================
  # Zabbix Server DC2
  # =========================
  zabbix-server:
    build:
      context: ../zabbix
      dockerfile: Dockerfile.server
    container_name: zbx-server-dc2
    restart: unless-stopped
    environment:
      DB_SERVER_HOST: "10.7.0.10"     # VIP DB (ikut failover)
      MYSQL_DATABASE: "zabbix"
      MYSQL_USER: "zabbix"
      MYSQL_PASSWORD: "AndesZabbix!"
      HANodeName: "dc2"
      TZ: "Asia/Jakarta"
    ports:
      - "10051:10051"
    depends_on:
      - mysql2
    healthcheck:
      test: ["CMD-SHELL", "timeout 3 bash -lc '</dev/tcp/127.0.0.1/10051' || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 30

  # =========================
  # Zabbix Web DC2
  # =========================
  zabbix-web:
    build:
      context: ../zabbix
      dockerfile: Dockerfile.web
    container_name: zbx-web-dc2
    restart: unless-stopped
    environment:
      DB_SERVER_HOST: "10.7.0.10"     # VIP DB
      MYSQL_DATABASE: "zabbix"
      MYSQL_USER: "zabbix"
      MYSQL_PASSWORD: "AndesZabbix!"
      ZBX_SERVER_HOST: "zbx-server-dc2"
      PHP_TZ: "Asia/Jakarta"
    ports:
      - "8080:8080"
    depends_on:
      - zabbix-server
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:8080/ || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 30

====================== ./dc2/keepalived/keepalived.conf ======================
global_defs {
  script_user root
  enable_script_security
}

# Cek MySQL DC2: sukses hanya jika read_only=0 (siap menulis)
vrrp_script chk_mysql {
  script "/etc/keepalived/scripts/is_primary.sh"
  interval 5
  timeout 3
  fall 2
  rise 1
}

vrrp_instance VI_DB {
  state BACKUP
  initial_state BACKUP
  interface wg0
  virtual_router_id 51
  priority 150
  advert_int 1
  nopreempt

  authentication {
    auth_type PASS
    auth_pass 1234
  }

  unicast_src_ip 10.7.0.5
  unicast_peer {
    10.7.0.4
  }

  virtual_ipaddress {
    10.7.0.10/32 dev wg0 label wg0:vip
  }

  track_script {
    chk_mysql
  }

  track_interface {
    wg0
  }

  garp_master_delay 1
  garp_master_repeat 5
  garp_master_refresh 10
  garp_master_refresh_repeat 2

  notify_master "/etc/keepalived/scripts/notify.sh master"
  notify_backup "/etc/keepalived/scripts/notify.sh backup"
  notify_fault  "/etc/keepalived/scripts/notify.sh fault"
}


====================== ./dc2/keepalived/keepalived.service.d/override.conf ======================
global
    log /dev/log local0
    maxconn 4096

defaults
    log global
    mode tcp
    option tcplog
    timeout connect 5s
    timeout client  60s
    timeout server  60s
    retries 3

# =========================
# MySQL via VIP (user/app connect ke 10.7.0.10:3306)
# =========================
frontend mysql_front
    bind 10.7.0.10:3306
    default_backend mysql_local

backend mysql_local
    mode tcp
    option tcp-check
    server localmysql 127.0.0.1:3306 check inter 2s fall 3 rise 2

# =========================
# Zabbix Server (10051) via VIP
# =========================
frontend zabbix_server_front
    bind 10.7.0.10:10051
    default_backend zabbix_server_local

backend zabbix_server_local
    mode tcp
    option tcp-check
    server localzbx 127.0.0.1:10051 check inter 2s fall 3 rise 2

# =========================
# Zabbix Web (8080) via VIP
# =========================
frontend zabbix_web_front
    bind 10.7.0.10:8080
    default_backend zabbix_web_local

backend zabbix_web_local
    mode tcp
    option tcp-check
    server localweb 127.0.0.1:8080 check inter 2s fall 3 rise 2


====================== ./dc2/keepalived/scripts/demote_dc2.sql ======================
-- Demote DC2 ke replica mengikuti VIP
SET GLOBAL super_read_only=1;
SET GLOBAL read_only=1;
STOP REPLICA;
RESET REPLICA ALL;
CHANGE REPLICATION SOURCE TO
  SOURCE_HOST           = '10.7.0.10',
  SOURCE_PORT           = 3306,
  SOURCE_USER           = 'rep1',
  SOURCE_PASSWORD       = 'abcdef',
  SOURCE_AUTO_POSITION  = 1,
  GET_SOURCE_PUBLIC_KEY = 1;
START REPLICA;


====================== ./dc2/keepalived/scripts/is_primary.sh ======================
#!/usr/bin/env bash
set -euo pipefail
docker exec -i mysql2 mysql -uroot -pabcdef -Nse "SELECT @@read_only" 2>/dev/null | grep -qx "0"


====================== ./dc2/keepalived/scripts/notify.sh ======================
#!/usr/bin/env bash
set -euo pipefail

TYPE="${1:-}"
LOG="/var/log/keepalived-notify.log"

# MySQL lokal (container di DC2)
MYSQL_CMD="docker exec -i mysql2 mysql -uroot -pabcdef"

# MySQL remote (langsung TCP ke DC1)
REMOTE_MYSQL="mysql -h10.7.0.4 -uha -pHaPassw0rd! --connect-timeout=3"

# File SQL lokal (DC2) & remote (DC1)
SQL_PROMOTE_LOCAL="/etc/keepalived/scripts/promote_dc2.sql"
SQL_DEMOTE_LOCAL="/etc/keepalived/scripts/demote_dc2.sql"
SQL_PROMOTE_REMOTE="/etc/keepalived/scripts/promote_dc1.sql"
SQL_DEMOTE_REMOTE="/etc/keepalived/scripts/demote_dc1.sql"

# Hub (opsional)
HUB="10.7.0.1"
SSH_OPTS="-o StrictHostKeyChecking=no -q -T"

ts(){ date '+%F %T'; }
log(){ echo "[$(ts)] $*" | tee -a "$LOG"; }

# Helper cek read_only remote (DC1)
remote_ro(){
  mysql -h10.7.0.4 -uha -pHaPassw0rd! -Nse "SELECT @@read_only" 2>/dev/null || echo "ERR"
}

echo "[$(ts)] DC2 VRRP event: $TYPE" >> "$LOG"

case "$TYPE" in
  master)
    # 1) DEMOTE PEER (DC1) dulu ‚Üí replica ke VIP (anti dual-writer)
    log "Demote DC1 ke REPLICA (VIP)"
    if ! $REMOTE_MYSQL < "$SQL_DEMOTE_REMOTE" >> "$LOG" 2>&1; then
      log "ERROR: demote DC1 gagal ‚Üí ABORT promote (hindari dual-writer)"
      exit 1
    fi
    rro="$(remote_ro)"
    [[ "$rro" == "1" ]] || log "WARNING: verifikasi remote @@read_only=$rro"

    # 2) PROMOTE lokal (DC2) jadi writer
    log "Promote DC2 jadi WRITER"
    $MYSQL_CMD < "$SQL_PROMOTE_LOCAL" >> "$LOG" 2>&1

    # 3) Switch route di HUB ke db2 (setelah writer siap)
    ssh $SSH_OPTS "root@$HUB" "switch-db-route.sh db2" >> "$LOG" 2>&1 || true

    log "Sukses MASTER handler: DC2 WRITER, DC1 REPLICA"
    ;;

  backup)
    # 1) DEMOTE lokal (DC2) ‚Üí replica ke VIP
    log "Demote DC2 ke REPLICA (VIP)"
    $MYSQL_CMD < "$SQL_DEMOTE_LOCAL" >> "$LOG" 2>&1 || { log "ERROR: demote DC2 gagal"; exit 1; }

    # 2) PROMOTE remote (DC1) jadi writer (best-effort)
    log "Promote DC1 jadi WRITER"
    $REMOTE_MYSQL < "$SQL_PROMOTE_REMOTE" >> "$LOG" 2>&1 || log "WARNING: promote DC1 gagal (cek manual)"

    # 3) Switch route di HUB ke db1
    ssh $SSH_OPTS "root@$HUB" "switch-db-route.sh db1" >> "$LOG" 2>&1 || true

    log "Sukses BACKUP handler: DC2 REPLICA, DC1 WRITER"
    ;;

  fault)
    log "DC2 fault condition (no-op)"
    ;;

  *)
    log "Event tidak dikenal: $TYPE"
    ;;
esac


====================== ./dc2/keepalived/scripts/notify_v1.sh ======================
#!/usr/bin/env bash
set -euo pipefail

TYPE="${1:-}"
LOG="/var/log/keepalived-notify.log"

echo "[$(date '+%F %T')] DC2 VRRP event: $TYPE" >> "$LOG"

case "$TYPE" in
  master)
    # DC2 naik MASTER ‚Üí arahkan route di hub ke db2
    ssh -o StrictHostKeyChecking=no root@10.7.0.1 -q -T "switch-db-route.sh db2" >> "$LOG" 2>&1
    ;;
  backup)
    echo "[$(date '+%F %T')] DC2 masuk BACKUP (no-op)" >> "$LOG"
    ;;
  fault)
    echo "[$(date '+%F %T')] DC2 fault condition" >> "$LOG"
    ;;
esac


====================== ./dc2/keepalived/scripts/promote_dc2.sql ======================
-- Promote DC2 (writer)
STOP REPLICA;
RESET REPLICA ALL;
SET GLOBAL super_read_only=0;
SET GLOBAL read_only=0;


====================== ./docs/README.md ======================
# mysql-ha

Cluster **MySQL High Availability + Zabbix HA** lintas Data Center menggunakan **WireGuard VPN** dan **Keepalived VIP**.

## Struktur Direktori
- `dc1/`, `dc2/` ‚Üí konfigurasi per Data Center (docker-compose untuk MySQL & Zabbix).  
- `mysql/` ‚Üí konfigurasi MySQL Group Replication.  
- `zabbix/` ‚Üí konfigurasi Zabbix server & frontend.  
- `docs/` ‚Üí catatan & dokumentasi bootstrap.  

## Mekanisme HA
- **Database** direplikasi menggunakan **MySQL Group Replication** (single-primary mode) antara DC1 & DC2.  
- **Keepalived** mengelola Virtual IP (**10.7.0.10**) untuk semua layanan:  
  - `10.7.0.10:3306` ‚Üí MySQL cluster  
  - `10.7.0.10:10051` ‚Üí Zabbix server  
  - `10.7.0.10:8080` ‚Üí Zabbix frontend (Web UI)  
- **Failover**: Jika DC1 down, DC2 akan otomatis mengambil alih VIP, begitu juga sebaliknya.  
- **Zabbix Server** berjalan di DC1 & DC2 dengan HA mode (`HANodeName` berbeda, hanya 1 node aktif).  
- **Zabbix Frontend** tersedia di kedua DC, diakses melalui **VIP yang sama**.  

## Catatan
- **WireGuard** harus sudah dikonfigurasi di host (bukan container).  
- Semua container MySQL & Zabbix tetap berjalan di kedua DC.  
- VIP `10.7.0.10` berpindah otomatis antar DC melalui **Keepalived**.  
- Monitoring client (misalnya NMS atau pengguna web) cukup mengakses VIP saja, tanpa perlu tahu node mana yang sedang aktif.  


====================== ./git-pull.sh ======================
#!/bin/bash
# Script otomatis git force pull dengan timestamp log

TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")

echo "üîÑ [$TIMESTAMP] Menarik update terbaru (force pull) dari remote..."

# Ambil semua update remote
git fetch --all

# Reset ke remote main (hapus perubahan lokal)
git reset --hard origin/main

echo "‚úÖ [$TIMESTAMP] Force pull selesai (sinkron dengan origin/main)"


====================== ./git-push.sh ======================
#!/usr/bin/env bash
set -euo pipefail

ts="$(date '+%Y-%m-%d %H:%M:%S')"

# Ambil daftar file yang berubah (sudah di-tracked atau baru)
files=$(git status --porcelain | awk '{print $2}')

if [ -z "$files" ]; then
  echo "‚úÖ Tidak ada perubahan file."
  exit 0
fi

# Hitung total baris repo untuk persentase
total_lines=$(git ls-files | xargs cat 2>/dev/null | wc -l)

for f in $files; do
  # Stage file ini
  git add "$f"

  # Hitung perubahan baris file ini
  stats=$(git diff --cached --numstat "$f" || true)
  insert=$(echo "$stats" | awk '{print $1}')
  delete=$(echo "$stats" | awk '{print $2}')
  change=$((insert + delete))

  if [ "$total_lines" -gt 0 ]; then
    percent=$((100 * change / total_lines))
  else
    percent=0
  fi

  echo "üìù Commit $f dengan pesan: update($f) $ts | $change lines (~$percent%)"
  git commit -m "update($f): $ts | Perubahan: $change lines (~$percent%)"
done

echo "üöÄ Push semua commit ke remote (origin main)..."
git push origin main


====================== ./list_files.sh ======================
#!/bin/bash

# Folder atau file yang akan diabaikan (boleh wildcard)
IGNORED_DIRS=(".git" "node_modules" "*.log" "*.txt")

# File output gabungan
OUTPUT_FILE="all.txt"
> "$OUTPUT_FILE" # kosongkan file output

print_tree_and_collect() {
    local dir="$1"
    local prefix="$2"
    local items=("$dir"/*)
    local count=${#items[@]}
    local index=0

    for item in "${items[@]}"; do
        local basename=$(basename "$item")

        # Lewati jika cocok dengan pola di IGNORED_DIRS (mendukung wildcard)
        for ignored in "${IGNORED_DIRS[@]}"; do
            if [[ "$basename" == $ignored ]]; then
                continue 2
            fi
        done

        index=$((index + 1))
        local connector="‚îú‚îÄ‚îÄ"
        [[ $index -eq $count ]] && connector="‚îî‚îÄ‚îÄ"

        if [[ -d "$item" ]]; then
            echo "${prefix}${connector} üìÅ $basename/"
            print_tree_and_collect "$item" "${prefix}‚îÇ   "
        elif [[ -f "$item" ]]; then
            echo "${prefix}${connector} üìÑ $basename"

            # Tambahkan isi file ke all.txt
            {
                echo ""
                echo "====================== $item ======================"
                cat "$item"
                echo ""
            } >> "$OUTPUT_FILE"
        fi
    done
}

echo "üìÅ $(basename "$(pwd)")/"
print_tree_and_collect "." "‚îÇ   "

echo ""
echo "‚úÖ Semua isi file tersimpan ke: $OUTPUT_FILE"


====================== ./mysql/Dockerfile ======================
FROM mysql:8.0.30

LABEL maintainer="Andes Solutions"

# Tambahkan tools troubleshooting
RUN microdnf install -y iputils net-tools iproute dnsutils curl vim traceroute tcpdump && \
    microdnf clean all

CMD ["mysqld"]


====================== ./mysql/dc1.sql ======================
-- ======================================================
-- DC1 bootstrap GTID auto-position replication (peer DC2: 10.7.0.5)
-- Aman di-run berulang (idempotent)
-- ======================================================

-- 0) Opsional: tambah user HA untuk kontrol via MySQL TCP dari peer wg (10.7.x.x)
CREATE USER IF NOT EXISTS 'ha'@'10.7.%' IDENTIFIED BY 'HaPassw0rd!';
GRANT SYSTEM_USER, SYSTEM_VARIABLES_ADMIN, SESSION_VARIABLES_ADMIN, RELOAD,
       REPLICATION SLAVE, REPLICATION CLIENT, PROCESS
ON *.* TO 'ha'@'10.7.%';
FLUSH PRIVILEGES;

-- 1) Siapkan user replikasi (kalau belum ada)
CREATE USER IF NOT EXISTS 'rep1'@'%' IDENTIFIED BY 'abcdef';
GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'rep1'@'%';
FLUSH PRIVILEGES;

-- 2) Anti tabrakan AUTO_INCREMENT (DC1 = offset 1)
--    (Persist agar bertahan setelah restart)
SET PERSIST auto_increment_increment = 2;
SET PERSIST auto_increment_offset    = 1;

-- 3) Bersihkan sisa channel replikasi bila ada
STOP REPLICA;
RESET REPLICA ALL;

-- 4) Subscribekan DC1 ke DC2 dengan GTID AUTO_POSITION
--    (mengikuti binlog DC2; public key diambil otomatis jika pakai caching_sha2_password)
CHANGE REPLICATION SOURCE TO
  SOURCE_HOST           = '10.7.0.5',
  SOURCE_PORT           = 3306,
  SOURCE_USER           = 'rep1',
  SOURCE_PASSWORD       = 'abcdef',
  SOURCE_AUTO_POSITION  = 1,
  GET_SOURCE_PUBLIC_KEY = 1;

-- 5) Mulai replikasi
START REPLICA;

-- 6) (Opsional) Set REPLICA agar read-only jika peran node ini bukan writer
--    Biarkan skrip failover (notify.sh) yang kontrol RO/RW saat produksi
-- SET GLOBAL super_read_only=1; 
-- SET GLOBAL read_only=1;

-- 7) Verifikasi ringkas
SHOW REPLICA STATUS\G
SELECT @@server_id AS server_id, @@gtid_mode AS gtid_mode, @@enforce_gtid_consistency AS enforce_gtid_consistency\G


====================== ./mysql/dc2.sql ======================
-- ======================================================
-- DC2 bootstrap GTID auto-position replication (peer DC1: 10.7.0.4)
-- Aman di-run berulang (idempotent)
-- ======================================================

-- 0) Opsional: tambah user HA untuk kontrol via MySQL TCP dari peer wg (10.7.x.x)
CREATE USER IF NOT EXISTS 'ha'@'10.7.%' IDENTIFIED BY 'HaPassw0rd!';
GRANT SYSTEM_USER, SYSTEM_VARIABLES_ADMIN, SESSION_VARIABLES_ADMIN, RELOAD,
       REPLICATION SLAVE, REPLICATION CLIENT, PROCESS
ON *.* TO 'ha'@'10.7.%';
FLUSH PRIVILEGES;

-- 1) Siapkan user replikasi (kalau belum ada)
CREATE USER IF NOT EXISTS 'rep1'@'%' IDENTIFIED BY 'abcdef';
GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'rep1'@'%';
FLUSH PRIVILEGES;

-- 2) Anti tabrakan AUTO_INCREMENT (DC2 = offset 2)
SET PERSIST auto_increment_increment = 2;
SET PERSIST auto_increment_offset    = 2;

-- 3) Bersihkan sisa channel replikasi bila ada
STOP REPLICA;
RESET REPLICA ALL;

-- 4) Subscribekan DC2 ke DC1 dengan GTID AUTO_POSITION
CHANGE REPLICATION SOURCE TO
  SOURCE_HOST           = '10.7.0.4',
  SOURCE_PORT           = 3306,
  SOURCE_USER           = 'rep1',
  SOURCE_PASSWORD       = 'abcdef',
  SOURCE_AUTO_POSITION  = 1,
  GET_SOURCE_PUBLIC_KEY = 1;

-- 5) Mulai replikasi
START REPLICA;

-- 6) (Opsional) Set REPLICA agar read-only jika peran node ini bukan writer
--    Biarkan skrip failover (notify.sh) yang kontrol RO/RW saat produksi
-- SET GLOBAL super_read_only=1; 
-- SET GLOBAL read_only=1;

-- 7) Verifikasi ringkas
SHOW REPLICA STATUS\G
SELECT @@server_id AS server_id, @@gtid_mode AS gtid_mode, @@enforce_gtid_consistency AS enforce_gtid_consistency\G


====================== ./mysql/init-replica.sql ======================
-- ======================================================
-- Init script untuk konfigurasi DC2 sebagai replica DC1
-- ======================================================

-- Pastikan tidak ada replikasi lama
STOP REPLICA;
RESET REPLICA ALL;

-- Atur source replication (DC1 ‚Üí DC2)
CHANGE REPLICATION SOURCE TO
  SOURCE_HOST = '10.7.0.4',
  SOURCE_PORT = 3306,
  SOURCE_USER = 'rep1',
  SOURCE_PASSWORD = 'abcdef',
  SOURCE_LOG_FILE = 'binlog.000005',   -- hasil SHOW MASTER STATUS di DC1
  SOURCE_LOG_POS  = 1433,              -- hasil SHOW MASTER STATUS di DC1
  SOURCE_SSL = 1;

-- Mulai proses replikasi
START REPLICA;

-- Verifikasi status
SHOW REPLICA STATUS\G


====================== ./mysql/init.sql ======================
-- ======================================================
-- User untuk replikasi (rep1)
-- ======================================================
DROP USER IF EXISTS 'rep1'@'%';
CREATE USER 'rep1'@'%' IDENTIFIED BY 'abcdef';

GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'rep1'@'%';

FLUSH PRIVILEGES;


====================== ./mysql/my.cnf.dc1 ======================
[mysqld]
# Identity
server_id=1
bind-address=0.0.0.0

# Binary log wajib untuk replikasi
log_bin=binlog
binlog_format=ROW
sync_binlog=1

# GTID (opsional tapi disarankan untuk failover otomatis/manual)
gtid_mode=ON
enforce_gtid_consistency=ON

# Replikasi
relay_log=relay-bin
relay_log_index=relay-bin.index
master_info_repository=TABLE
relay_log_info_repository=TABLE

# Semi-sync replication (failover RPO rendah)
plugin_load_add=semisync_master.so
plugin_load_add=semisync_replication.so
rpl_semi_sync_master_enabled=ON
rpl_semi_sync_replica_enabled=ON
rpl_semi_sync_master_timeout=1000   # 1s timeout menunggu ack replica

# Optimasi & keamanan
skip_name_resolve=ON
binlog_checksum=NONE

# Laporan host ke replica
report_host=10.7.0.4
report_port=3306

# Default karakter set
character-set-server=utf8mb4
collation-server=utf8mb4_general_ci


====================== ./mysql/my.cnf.dc2 ======================
[mysqld]
# Identity
server_id=2
bind-address=0.0.0.0

# Binary log tetap diaktifkan agar bisa promote DC2 jadi master jika DC1 down
log_bin=binlog
binlog_format=ROW
sync_binlog=1

# GTID (sama dengan DC1)
gtid_mode=ON
enforce_gtid_consistency=ON

# Relay log (wajib untuk replica)
relay_log=relay-bin
relay_log_index=relay-bin.index
master_info_repository=TABLE
relay_log_info_repository=TABLE

# Semi-sync replication (failover RPO rendah)
plugin_load_add=semisync_master.so
plugin_load_add=semisync_replication.so
rpl_semi_sync_master_enabled=ON
rpl_semi_sync_replica_enabled=ON
rpl_semi_sync_master_timeout=1000

# Optimasi & keamanan
skip_name_resolve=ON
binlog_checksum=NONE

# Laporan host ke source
report_host=10.7.0.5
report_port=3306

# Default karakter set
character-set-server=utf8mb4
collation-server=utf8mb4_general_ci


====================== ./rebuild.sh ======================
#!/usr/bin/env bash
set -euo pipefail

BASE_DIR="$(dirname "$0")"

if [[ $# -eq 0 ]]; then
  echo "‚ùå Harus ada parameter! Contoh:"
  echo "   ./rebuild.sh dc1"
  echo "   ./rebuild.sh dc2"
  echo "   ./rebuild.sh hub"
  exit 1
fi

TARGET="$1"
TARGET_DIR="$BASE_DIR/$TARGET"

if [[ ! -d "$TARGET_DIR" ]]; then
  echo "‚ùå Folder $TARGET_DIR tidak ditemukan!"
  exit 2
fi

echo "üöÄ Rebuild docker compose untuk: $TARGET"
echo "========================================="

cd "$TARGET_DIR"

echo "üî® docker compose build..."
docker compose build --no-cache

echo "‚¨ÜÔ∏è docker compose up -d..."
docker compose up -d

echo "‚úÖ $TARGET selesai"

echo ""
echo "üéâ Service $TARGET berhasil direbuild & dijalankan!"


====================== ./zabbix/Dockerfile.server ======================
FROM zabbix/zabbix-server-mysql:alpine-6.4-latest

LABEL maintainer="Andes Solutions"

USER root
RUN apk add --no-cache bash curl vim iputils bind-tools net-tools iproute2 tcpdump
USER zabbix

EXPOSE 10051
CMD ["docker-entrypoint.sh"]


====================== ./zabbix/Dockerfile.web ======================
FROM zabbix/zabbix-web-nginx-mysql:alpine-6.4-latest

LABEL maintainer="Andes Solutions"

USER root
RUN apk add --no-cache bash curl vim iputils bind-tools net-tools iproute2 tcpdump
USER zabbix

EXPOSE 8080
CMD ["docker-entrypoint.sh"]

